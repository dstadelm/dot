== Python ==
=== Tools ===
pylint -> python-lsp-server should have this covered
pylance -> microsoft made it so that it can only be used with vscode
black -> make sure to use python-lsp-black and that yapf and autopep8 are not installed
pyflyby -> allows autoimport pip3 install pyflyby
pylsp-rope -> enables code actions through lsp
pyls-mypy

=== Testing ===
pyfakefs for virtual filesystem it is registered with pytest and it can be used/passed in a pytest
{{{
import pytest
import os

def test_testname(fs):
  fs.create_file("/fakedir/test.log")
  assert os.path.exists("/fakedir/test.log")
}}}



=== SCSrun.py ===
1. requires wheel ```pip3 install wheel```
2. install with ```pip3 install scsrunpy/.```

=== Visitor Pattern with Decorators ===
https://tavianator.com/2014/python_visitor.html

{{{
class Lion: pass
class Tiger: pass
class Bear: pass

class ZooVisitor:
    @visitor(Lion)
    def visit(self, animal):
        return "Lions"

    @visitor(Tiger)
    def visit(self, animal):
        return "tigers"

    @visitor(Bear)
    def visit(self, animal):
        return "and bears, oh my!"

animals = [Lion(), Tiger(), Bear()]
visitor = ZooVisitor()
print(', '.join(visitor.visit(animal) for animal in animals))
# Prints "Lions, tigers, and bears, oh my!"
}}}

{{{
# A couple helper functions first

def _qualname(obj):
    """Get the fully-qualified name of an object (including module)."""
    return obj.__module__ + '.' + obj.__qualname__

def _declaring_class(obj):
    """Get the name of the class that declared an object."""
    name = _qualname(obj)
    return name[:name.rfind('.')]

# Stores the actual visitor methods
_methods = {}

# Delegating visitor implementation
def _visitor_impl(self, arg):
    """Actual visitor method implementation."""
    method = _methods[(_qualname(type(self)), type(arg))]
    return method(self, arg)

# The actual @visitor decorator
def visitor(arg_type):
    """Decorator that creates a visitor method."""

    def decorator(fn):
        declaring_class = _declaring_class(fn)
        _methods[(declaring_class, arg_type)] = fn

        # Replace all decorated methods with _visitor_impl
        return _visitor_impl

    return decorator
}}}

=== Plugin Architectures ===
* https://alysivji.github.io/simple-plugin-system.html
* https://dev.to/charlesw001/plugin-architecture-in-python-jla

=== Yaml ===
[[YAML]]

=== Python DATA CLASSES ===
https://youtu.be/vRVVyl9uaZc

=== Python Exception Handling ===
https://youtu.be/ZsvftkbbrR0

=== Cohesion and coupling ===
https://youtu.be/eiDyK_ofPPM

=== Strategy Pattern ===
https://youtu.be/n2b_Cxh20Fw

=== Code coverage ===
https://youtu.be/jmP3fp_BhmE

=== Code Smells ===
https://youtu.be/LrtnLEkOwFE
https://youtu.be/zmWf_cHyo8s

== Overloading functions ==
https://martinheinz.dev/blog/50
* from multipledispatch import dispatch
* from functools import singledispatchmethod

=== Virtual Env ===
1. create a virtual env with ``` pythonx.x -m venv pyenv ```
2. enter env with ```source pyenv/bin/activate```
3. install requirements with ```pip3 install -r requirements```

= Poetry =
Create a environment with a given python version:
1. use pyenv to install the version desired
2. activate using
  {{{
  pyenv shell version
  }}}
3. use
  {{{class="brush: console"
  poetry env use $(pyenv which python)
  }}}


= Installing a custom python version with pyenv =
To install a custom python version that differs from the system python version
pyenv was used in this Project. Follow the installation instructions on pyenv_.
Or as for the moment when writing this document you can use

{{{
   > curl https://pyenv.run | bash
}}}

To install your desired version through pyenv use the following command, where
version could be 3.11.2

{{{
   > pyenv install <version> console
}}}

== [[Using]] the custom python version ==

=== Installing poetry ===

There are various possibilities to install poetry you can follow the
instructions on  poetry_installation_. The method used and tested in this
project is using the official installer poetry_official_installer_.

=== Setting up the virtual environment ===

By default poetry creates the virtual environment in the cache directory. The
authors opinion is that it is better to use a in project virtual environment.
This can be achieved by configuring poetry.

{{{
   :name: Setting up in project virtual environemnt

   > poetry config virtualenvs.in-project true
}}}

This shoud add an entry in ~/.config/pypoetry/config.toml

{{{
   > cat ~/.config/pypoetry/config.toml
   [virtualenvs]
   in-project = true
}}}


Once you have your desired python version installed you can setup the virtual
environment with poetry


{{{
   > pyenv shell <version>
   > poetry env use $(pyenv which python)
}}}

=== Installing the dependencies ===


{{{
   > poetry install
}}}


If poetry fails to install any dependencies try to remove any existing
poetry.lock file.

== Entering the poetry environment ==
Following command can be used to enter the environment

{{{
   > poetry shell
}}}

To leave the virtual environment

{{{
   > exit
}}}

=== Automate environment entry with *direnv* ===

To automate the process of entering and leaving the virtual environment an
.envrc exists which can be used with direnv. For direnv to work with poetry,
direnv requires following lines in ~/.direnvrc

{{{

   layout_poetry() {
     if [[ ! -f pyproject.toml ]]; then
       log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
       exit 2
     fi

     local VENV=$(dirname $(poetry run which python))
     export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
     export POETRY_ACTIVE=1
     PATH_add "$VENV"
   }
}}}

Then you need to allow direnv to execute the .envrc file. For that, change to
the root directory of the project and execute

{{{
   > direnv allow .
}}}

From now on the virtual environment is activated automatically as soon as you
enter the directory, assuming you are using the terminal. As soon as you leave
the directory the environment is deactivated.
