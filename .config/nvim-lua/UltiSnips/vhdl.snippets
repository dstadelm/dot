global !p
def complete(t, opts):
	if t:
			opts = [ m[len(t):] for m in opts if m.startswith(t) ]
			if len(opts) == 1:
				return opts[0]
			return "(" + '|'.join(opts) + ')'
endglobal

snippet lib "library ieee; | use ieee.std_logic_1164.all; | use ieee.numeric_std.all;"
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
endsnippet


snippet ent "entity ... ; | architecture ...;"
entity ${1:} is
	port(
		${2});
end $1;
architecture ${0:behavioral} of $1 is
begin
end $0;
endsnippet

snippet out "output port"
	${1} : out ${2}${3:;}
$0
endsnippet

snippet in "input port"
	${1} : in ${2}${3:;}
$0
endsnippet

snippet sl "std_logic"
std_logic
endsnippet

snippet slv "std_logic_vector(x downto y)"
std_logic_vector(${1} downto ${0})
endsnippet

snippet u "unsigned(x downto y)"
unsigned(${1} downto ${0})
endsnippet

snippet s "signed(x downto y)"
signed(${1} downto ${0})
endsnippet

snippet ot "(others => '0')"
(others => ${0:'0'})
endsnippet

snippet with "with ... select"
with ${1} select
	${2} <=
endsnippet


snippet type "type ... is (...);"
type ${1} is (${2});
endsnippet

snippet proc "process(clk) ..."
process(${1:clk})
begin
	if rising_edge($1) then
		${0:${VISUAL}}
	end if;
end process;
endsnippet

snippet ifup "if rising_edge(clk) then ..."
if rising_edge(${1:clk}) then
	${0:${VISUAL}}
end if;
endsnippet

snippet case "case ... is ..."
case ${0:${VISUAL}} is
	when others => null;
end case;
endsnippet

snippet var "variable"
variable ${1} : ${2:natural} ${0::= 0};
endsnippet

snippet const "constant"
constant ${1} : ${2:natural} ${0::= 0};
endsnippet

snippet sig "signal <name> : <type> <:=initialization>"
signal ${1} : ${2:std_logic} ${0::= '0'};
endsnippet

snippet pip "sig(sig'left-1 downto sig'right) <= sig(sig'left downto sig'right+1)"
${1}($1'left-1 downto $1'right) <= $1($1'left downto $1'right+1);
endsnippet

snippet tb "testbench snippet"
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library vunit_lib;
context vunit_lib.vunit_context;
context vunit_lib.com_context;
context vunit_lib.vc_context;
use vunit_lib.array_pkg.all;

library work;
use work.tb_func_pkg.all;
use work.common_pkg.all;

entity `!p snip.rv = snip.basename` is
  generic (runner_cfg : string := runner_cfg_default);
end `!p snip.rv = snip.basename`;

architecture TB of  `!p snip.rv = snip.basename` is

  -----------------------------------------------------------------------------
  -- tb signals and constants
  -----------------------------------------------------------------------------
  constant c_clock_period : time := 2 ns;
  constant c_clr_period   : time := c_clock_period * 100;
  constant C_MY_CHECKER   : checker_t := new_checker("zf-radar");
  signal   clk            : std_logic := '0';
  signal   clr            : std_logic := '1';

begin

  -----------------------------------------------------------------------------
  -- Vunit Process
  -----------------------------------------------------------------------------
  vunit_run : process
  begin
    test_runner_setup(runner, runner_cfg);
    set_stop_level(get_logger(C_MY_CHECKER), failure);
    while test_suite loop
      if run("${0}") then
			  wait until rising_edge(clk) and clr = '1';
			  wait until rising_edge(clk) and clr = '0';
      end if;

    end loop;
    test_runner_cleanup(runner);
    wait;
  end process;

  -----------------------------------------------------------------------------
  -- TB driven signal
  clk <= not clk after c_clock_period;
  clr <= '0' after c_clr_period;
  -----------------------------------------------------------------------------
  -- Timeout Watchdog
  -----------------------------------------------------------------------------
  test_runner_watchdog(runner, 50 us);

end TB;
endsnippet

snippet pack "package"
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package ${1} is
end $1;

package body $1 is
end $1;
endsnippet

snippet actor "VUnit Actor"
constant C_ACTOR_${1} : actor_t := new_actor("$1");
endsnippet

snippet axismaster "VUnit AXI stream master"
	constant C_AXI_STREAM_MASTER$2 : axi_stream_master_t := new_axi_stream_master(data_length => ${5:32});
  inst_${1} : entity vunit_lib.axi_stream_master
    generic map (master => C_AXI_STREAM_MASTER${2})
    port map (
      aclk   => clk,
      tready => ${4}.tready,
      tlast  => ${3}.tlast,
      tvalid => $3.tvalid,
      tdata  => $3.tdata($5-1 downto 0)
      );
endsnippet

snippet axisslave "VUnit AXI steam slave"
	constant C_AXI_STREAM_SLAVE$2 : axi_stream_slave_t := new_axi_stream_slave(data_length => ${5:32});
  inst_${1} : entity vunit_lib.axi_stream_slave
    generic map (slave => C_AXI_STREAM_SLAVE${2})
    port map (
      aclk   => clk,
      tvalid => ${3}.tvalid,
      tready => ${4}.tready,
      tdata  => $3.tdata($5-1 downto 0),
      tlast  => $3.tlast,
      tuser  => $3.tuser
      );
endsnippet

snippet axim_write "VUnit AXI memory write slave"
  constant C_AXI_MEMORY${2}     : axi_slave_t         := new_axi_slave(C_MEMORY, address_stall_probability => 0.1, data_stall_probability => 0.1);
  inst_${1} : entity vunit_lib.axi_write_slave
    generic map (axi_slave => C_AXI_MEMORY${2})
    port map (
      aclk    => clk,
      awready => ${4:i_axi4_s2m}.awready,
      awvalid => ${3:o_axi4_m2s}.awvalid,
      awaddr  => $3.awaddr,
      awlen   => $3.awlen,
      awsize  => $3.awsize,
      awburst => $3.awburst,
      awid    => $3.awid(AXI4_ID_WIDTH_C-1 downto 0),
      wready  => $4.wready,
      wvalid  => $3.wvalid,
      wdata   => $3.wdata(31 downto 0),
      wstrb   => $3.wstrb(3 downto 0),
      wlast   => $3.wlast,
      bready  => $3.bready,
      bvalid  => $4.bvalid,
      bresp   => $4.bresp,
      bid     => $4.bid(AXI4_ID_WIDTH_C-1 downto 0)
      );
endsnippet

snippet axim_read "VUnit AXI memory read slave"
  constant C_AXI_MEMORY${2}     : axi_slave_t         := new_axi_slave(C_MEMORY, address_stall_probability => 0.1, data_stall_probability => 0.1);
  inst_${1} : entity vunit_lib.axi_read_slave
    generic map (axi_slave => C_AXI_MEMORY${2})
    port map (
    aclk => clk,

    arvalid => ${3:o_axi4_m2s}.arvalid,
    arready => ${4:i_axi4_s2m}.arready,
    arid    => $3.arid,
    araddr  => $3.araddr,
    arlen   => $3.arlen,
    arsize  => $3.arsize,
    arburst => $3.arburst,

    rvalid => $4.rvalid,
    rready => $3.rready,
    rid    => $4.rid,
    rdata  => $4.rdata,
    rresp  => $4.rresp,
    rlast  => $4.rlast
      );
endsnippet
